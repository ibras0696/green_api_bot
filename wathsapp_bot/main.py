import asyncio
import logging

from whatsapp_chatbot_python import GreenAPIBot, Notification
from whatsapp_chatbot_python.filters import TEXT_TYPES

from wathsapp_bot.config import ID_INSTANCE, API_TOKEN
from wathsapp_bot.states.user_state import SearchState
from wathsapp_bot.utils.message_text import welcome_message, subscription_is_not_text, profile_message, commands_text
from wathsapp_bot.utils.movie_pars import pars_json_kino_poisk
from wathsapp_bot.utils.send_func import *
from wathsapp_bot.utils.shaduler_func import setup_scheduler

from database.crud import async_add_user, check_subscription, get_all_users, get_user
from database.db import init_db



bot = GreenAPIBot(ID_INSTANCE, API_TOKEN)



#
# # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
# print("Available states:", [state.value for state in SearchState])

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –û—á–∏—Å—Ç–∫–∏ –°–æ—Å—Ç–æ—è–Ω–∏—è
# @bot.router.message(command="cancel")
# def cancel_handler(notification: Notification) -> None:
#     sender = notification.sender
#     print(f"\n--- Cancel handler for {sender} ---")
#     print("Current state:", notification.state_manager.get_state(sender))
#
#
#     notification.answer("Bye")
#
#     print("State after cancel:", notification.state_manager.get_state(sender))

# –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è
@bot.router.message(text_message='0')
def profile_cmd(notification: Notification):
    sender = notification.sender
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–∂–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    notification.state_manager.delete_state(sender)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ë–î
    user = asyncio.run(get_user(sender))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –°—Ç–∞—Ç—É—Å–∞
    status = '–ê–∫—Ç–∏–≤–Ω—ã–π' if user.get('is_active', False) else '–ù–µ –ê–∫—Ç–∏–≤–Ω—ã–π'
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    txt = profile_message(whatsapp_id=user.get('whatsapp_id'),
                          created_at=user.get('created_at'), day_count=user.get('day_count'), is_active=status).strip()

    asyncio.run(send_message_text(sender, txt))

# –†–∞–±–æ—Ç–∞ —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
@bot.router.message(text_message='00')

# –†–∞–±–æ—Ç–∞ —Å –ø–æ–∏—Å–∫–æ–º
@bot.router.message(text_message='000')
def pars_handler(notification: Notification):
    sender = notification.sender
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–∂–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    notification.state_manager.delete_state(sender)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = asyncio.run(async_add_user(whatsapp_id=sender))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    check_result = asyncio.run(check_subscription(sender))
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏ –¥–∞—ë–º 5 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if result:
        # notification.answer(welcome_message)
        asyncio.run(send_message_text(sender, welcome_message))
    elif check_result:
        asyncio.run(send_message_text(sender, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"))
        # notification.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
        # –°—Ç–∞–≤–∏–º –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        notification.state_manager.set_state(sender, SearchState.SEARCH)
    else:
        asyncio.run(send_message_text(sender, subscription_is_not_text))
        # notification.answer(subscription_is_not_text)


@bot.router.message(state=SearchState.SEARCH.value, type_message=TEXT_TYPES)
def pars_search_handler(notification: Notification):
    sender = notification.sender
    # notification.answer("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!")
    asyncio.run(send_message_text(sender, "‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!"))
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ü–∞—Ä—Å–µ—Ä–∞
        data = asyncio.run(pars_json_kino_poisk(notification.message_text))

        if not data or not data.get("movies"):
            # notification.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            asyncio.run(send_message_text(sender, "üò¢ –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"))
            return

        asyncio.run(send_image_and_message(number_user=sender, dct_send=data))
    except (TypeError, ValueError, AttributeError):
        asyncio.run(send_message_text(sender, "üò¢ –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"))
        # notification.answer("üò¢ –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
    finally:
        notification.state_manager.delete_state(sender)
        # notification.answer("üîç 000 ‚Äì –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ ")
        asyncio.run(send_message_text(sender, commands_text))



async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    # asyncio.run(init_db())
    await init_db()
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ apscheduler
    await setup_scheduler(hour=0, minute=0)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
    asyncio.run(init_db())

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    setup_scheduler(hour=23, minute=24)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00

    try:
        bot.run_forever()
    except KeyboardInterrupt:
        print("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

