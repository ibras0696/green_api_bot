import asyncio
import logging
import threading


from whatsapp_chatbot_python import GreenAPIBot, Notification
from whatsapp_chatbot_python.filters import TEXT_TYPES

from wathsapp_bot.config import ID_INSTANCE, API_TOKEN
from wathsapp_bot.states.user_state import SearchState
from wathsapp_bot.utils.async_bot_manager import start_async_loop, run_async
from wathsapp_bot.utils.message_text import welcome_message, subscription_is_not_text, profile_message, commands_text
from wathsapp_bot.utils.movie_pars import pars_json_kino_poisk
from wathsapp_bot.utils.send_func import *
from wathsapp_bot.utils.shaduler_func import setup_scheduler

from database.crud import async_add_user, check_subscription, get_all_users, get_user, add_plas_subscriptions
from database.db import init_db



bot = GreenAPIBot(ID_INSTANCE, API_TOKEN)


# –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω—é
@bot.router.message(text_message='000')
def message_handler(notification: Notification) -> None:
    sender = notification.sender
    run_async(handle_user_message(sender, notification))

@bot.router.message(text_message='0')
def add_all_handler(notification: Notification):
    admins = ['79958042251@c.us', '79323056361@c.us']
    if notification.sender in admins:
        notification.answer('–ü–æ–¥–ø–∏—Å–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 5 –¥–Ω–µ–π')
        run_async(add_plas_subscriptions(5))

# –†–∞–±–æ—á–∞—è –í–µ—Ä—Å–∏—è –∫–æ–¥–∞
@bot.router.poll_update_message()
def start_poll_handler(notification: Notification) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–ø—Ä–æ—Å–æ–≤ (Poll).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –æ–ø—Ä–æ—Å–µ.

    üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.
    - –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä—è `run_async`.
    - FSM: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ `SEARCH` –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ü–æ–∏—Å–∫ –§–∏–ª—å–º–æ–≤".
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç".

    ‚ö†Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ `data_warning`.
    """

    sender = notification.sender
    votes = notification.event["messageData"]["pollMessageData"]["votes"]

    async def handle_poll():
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ –æ–ø—Ä–æ—Å–∞.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ run_async (—á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å).
        """
        try:
            for vote_data in votes:
                voters = vote_data["optionVoters"]
                if not voters:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–Ω–∫—Ç—ã –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤

                option_name = vote_data['optionName']

                # 1. –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
                if option_name == '1. –ü–æ–∏—Å–∫ –§–∏–ª—å–º–æ–≤':
                    await send_message_text(sender, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
                    notification.state_manager.set_state(sender, SearchState.SEARCH)

                # 2. –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
                elif option_name == '2. –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç':
                    user = await get_user(sender)
                    status = '–ê–∫—Ç–∏–≤–Ω—ã–π' if user.get('is_active', False) else '–ù–µ –ê–∫—Ç–∏–≤–Ω—ã–π'

                    txt = profile_message(
                        whatsapp_id=user.get('whatsapp_id'),
                        created_at=user.get('created_at'),
                        day_count=user.get('day_count'),
                        is_active=status
                    ).strip()

                    await send_message_text(sender, txt)

                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                else:
                    await send_message_text(sender, '–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ')

        except Exception as ex:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø—Ä–æ—Å–∞: {ex}')


    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
    run_async(handle_poll())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
@bot.router.message(state=SearchState.SEARCH.value, type_message=TEXT_TYPES)
def pars_search_handler(notification: Notification):
    sender = notification.sender
    run_async(process_search(sender, notification.message_text, notification))



if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=start_async_loop, daemon=True).start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    asyncio.run(init_db())

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å sync)
    setup_scheduler(hour=0, minute=0)

    try:
        bot.run_forever()
    except KeyboardInterrupt:
        print("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
